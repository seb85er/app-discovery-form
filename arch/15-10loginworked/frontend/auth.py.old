import os
import jwt
import logging
import datetime
from flask_login import LoginManager, login_user, logout_user, current_user, login_required
from functools import wraps
from azure.cosmos import CosmosClient, exceptions

# Logger setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Cosmos DB setup
COSMOS_URI = os.getenv('COSMOS_URI')
COSMOS_KEY = os.getenv('COSMOS_KEY')
COSMOS_DB_NAME = os.getenv('COSMOS_DB_NAME')
COSMOS_USERS_CONTAINER = os.getenv('COSMOS_USERS_CONTAINER', 'users')
COSMOS_ROLES_CONTAINER = os.getenv('COSMOS_ROLES_CONTAINER', 'roles')

# Initialize Cosmos DB client
client = CosmosClient(COSMOS_URI, credential=COSMOS_KEY)
database = client.get_database_client(COSMOS_DB_NAME)

# Create collections if they do not exist
def create_cosmos_db_collections():
    try:
        # Check if the users container exists
        try:
            database.create_container_if_not_exists(id=COSMOS_USERS_CONTAINER, partition_key="/user_id")
            logger.info(f"Users container '{COSMOS_USERS_CONTAINER}' created or already exists.")
        except exceptions.CosmosResourceExistsError:
            logger.info(f"Users container '{COSMOS_USERS_CONTAINER}' already exists.")

        # Check if the roles container exists
        try:
            database.create_container_if_not_exists(id=COSMOS_ROLES_CONTAINER, partition_key="/user_id")
            logger.info(f"Roles container '{COSMOS_ROLES_CONTAINER}' created or already exists.")
        except exceptions.CosmosResourceExistsError:
            logger.info(f"Roles container '{COSMOS_ROLES_CONTAINER}' already exists.")
    except exceptions.CosmosHttpResponseError as e:
        logger.error(f"Error creating Cosmos DB collections: {e}")

# Call the function to create the Cosmos DB collections at startup
create_cosmos_db_collections()

# Flask-Login setup
login_manager = LoginManager()

# Authentication toggle
AUTH_ENABLED = os.getenv('AUTH_ENABLED', 'True').lower() == 'true'

def init_auth(app):
    login_manager.init_app(app)
    login_manager.login_view = 'login'

    # Local user loader function
    @login_manager.user_loader
    def load_user(user_id):
        # Retrieve user by ID from Cosmos DB
        container = database.get_container_client(COSMOS_USERS_CONTAINER)
        try:
            user_item = container.read_item(item=user_id, partition_key=user_id)
            return user_item  # Implement a User class or object to handle this.
        except exceptions.CosmosResourceNotFoundError:
            return None

# Authentication decorator
def authenticate_user():
    if AUTH_ENABLED:
        return login_required
    else:
        def dummy_decorator(f):
            return f
        return dummy_decorator

# Role-based access control decorator
def role_required(role):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if AUTH_ENABLED:
                user_role = get_user_role(current_user.id, kwargs.get('app_id'))
                if user_role != role:
                    return "Access Denied", 403
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Fetch user role from Cosmos DB
def get_user_role(user_id, app_id):
    container = database.get_container_client(COSMOS_ROLES_CONTAINER)
    try:
        role_item = container.read_item(item=user_id, partition_key=user_id)
        # Find the role for the specific application
        app_role = role_item.get('roles', {}).get(app_id)
        return app_role if app_role else 'viewer'  # Default role is 'viewer'
    except exceptions.CosmosResourceNotFoundError:
        return 'viewer'

# Azure AD Authentication Logic
def azure_login():
    # Placeholder for Azure AD integration with MSAL or other methods.
    pass

# Local authentication
def local_login(email, password):
    # Implement the logic to validate local user credentials
    container = database.get_container_client(COSMOS_USERS_CONTAINER)
    try:
        user_item = container.read_item(item=email, partition_key=email)
        # Validate password (assume password hashing)
        if check_password_hash(user_item['password'], password):
            login_user(user_item)
            return True
        else:
            return False
    except exceptions.CosmosResourceNotFoundError:
        return False

def logout():
    logout_user()

# Invite token generation
def generate_invite_token(user_email, app_id):
    payload = {
        "user": user_email,
        "app_id": app_id,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=24)
    }
    token = jwt.encode(payload, 'your_secret_key', algorithm='HS256')
    return token

# Invite token verification
def verify_invite_token(token):
    try:
        payload = jwt.decode(token, 'your_secret_key', algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
